name: CI

on:
  push:
    branches:
      - main
      - release-*
    paths:
      - 'killercoda_cli/__about__.py'
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.11.5'

jobs:
  build-and-test:
    uses: ./.github/workflows/build-reusable.yml
    with:
      python-version: ${{ env.PYTHON_VERSION }}

  check-version:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current version
        id: get_version
        run: echo "VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' killercoda_cli/__about__.py)" >> $GITHUB_ENV

      - name: Check version change
        id: check_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          CURRENT_VERSION=${{ env.VERSION }}
          if [ "$LATEST_TAG" = "v$CURRENT_VERSION" ]; then
            echo "No version change detected."
            echo "version_changed=false" >> $GITHUB_ENV
          else
            echo "Version change detected."
            echo "version_changed=true" >> $GITHUB_ENV

  publish:
    if: needs.check-version.outputs.version_changed == 'true'
    needs:
      - build-and-test
      - check-version
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get PyPI Project Version
        run: |
          VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' killercoda_cli/__about__.py)
          echo "PYPI_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download Sdist and Wheel from GitHub
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: "dist"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.14
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Generate Changelog
        run: |
          if [ $(git tag -l | wc -l) -eq 0 ]; then
            echo "No previous tags found. Generating changelog for all commits."
            echo "## v${{ env.PYPI_VERSION }} - $(date +'%Y-%m-%d')" > CHANGELOG.md
            git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
          else
            PREVIOUS_TAG=$(git describe --tags --abbrev=0)
            echo "## v${{ env.PYPI_VERSION }} - $(date +'%Y-%m-%d')" > CHANGELOG.md
            git log $PREVIOUS_TAG..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG.md
          fi

      - name: Create Git Tag
        run: |
          git tag "v${{ env.PYPI_VERSION }}"
          git push origin "v${{ env.PYPI_VERSION }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.PYPI_VERSION }}"
          name: "v${{ env.PYPI_VERSION }}"
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Hatch
        run: pipx install hatch==1.7.0

      - name: Build Documentation
        run: hatch run docs:pdoc killercoda_cli -o docs

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
